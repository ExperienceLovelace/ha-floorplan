title: Ring
config:
  image: /local/floorplan/examples/ring/ring.svg
  stylesheet: /local/floorplan/examples/ring/ring.css
  log_level: info

  defaults:
      hover_action:
        action: hover-info
      tap_action: more-info

  functions: |
    >
    return {

      getPercentageFill: (entity) => {
        var max = [195, 232, 141];
        var min = [240, 113, 120];
        var r = Math.floor(min[0] + ((max[0] - min[0]) * (entity.state / 100)));
        var g = Math.floor(min[1] + ((max[1] - min[1]) * (entity.state / 100)));
        var b = Math.floor(min[2] + ((max[2] - min[2]) * (entity.state / 100)));
        return `fill: rgb(${r}, ${g}, ${b})`; 
      },

      someOtherFunctionA: (entity, entities, hass) => {
        return 'foo'; 
      },

      someOtherFunctionB: (entity, entities, hass) => {
        return 'bar'; 
      },
      
    };

  rules:
    - entity: sensor.ring_salon_battery
      state_action:
        - service: floorplan.text_set
          service_data:
            element: sensor.ring_salon_battery
            text: |
              >
              return (entity.state !== undefined) ? entity.state + "%" : "unknown";
        - service: floorplan.style_set
          service_data: ${functions.getPercentageFill(entity)}

    - entities:
        - binary_sensor.ring_salon_motion
      state_action:
        service: floorplan.class_set
        service_data:
          class: '${(entity.state === "on") ? "ring-motion" : ""}'

    - entity: binary_sensor.ring_salon_ding
      state_action:
        service: floorplan.class_set
        service_data:
          class: |
            >
            switch (entity.state) {
              case "on":
                return "ring-ding";

              case "off":
                return "";

              default:
                return "";
            }
